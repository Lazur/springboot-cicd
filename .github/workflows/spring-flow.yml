# This is a basic workflow to help you get started with Actions

name: Spring CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build and test simple Spring app

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2    

      - name: Build docker image
        run: mvn compile jib:buildTar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: jib-image.tar
          path: target/jib-image.tar

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  
  #Deploy artifact to EC2 instance via ssh
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: jib-image.tar
          repository: lazur/springboot-cicd
          path: jib-image.tar
      
      - name: Listing 
        run: ls -la

      - name: Upload artifact to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp jib-image.tar s3://kyrylo-popov-task1-static-website --region eu-west-1
      # - name: Copy artifact to EC2
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     port: ${{ secrets.EC2_PORT }}
      #     source: /tmp/demo-0.0.1-SNAPSHOT.jar
      #     target: /home/ec2-user

      # - name: Checkout code
      #   uses: actions/checkout@v2

      # - name: Copy re-run script to EC2
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     port: ${{ secrets.EC2_PORT }}
      #     source: .github/workflows/kill-app.sh
      #     target: /home/ec2-user

      # - name: Move script file
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     port: ${{ secrets.EC2_PORT }}
      #     script: mv .github/workflows/kill-app.sh /home/ec2-user/kill-app.sh
      #   env:
      #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      # - name: Run script on EC2
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     port: ${{ secrets.EC2_PORT }}
      #     script: |
      #       cd /home/ec2-user
      #       chmod +x kill-app.sh
      #       sh kill-app.sh
      #       ls -la /tmp
      #       scp /tmp/demo-0.0.1-SNAPSHOT.jar ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/
      #   env:
      #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      #     StrictHostKeyChecking: no

      # - name: Push to EC2
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     port: ${{ secrets.EC2_PORT }}
      #     script: |
      #       # cd /tmp
      #       # scp /tmp/demo-0.0.1-SNAPSHOT.jar ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/
      #       echo "Hello, world!"
      #   env:
      #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      #     StrictHostKeyChecking: no
