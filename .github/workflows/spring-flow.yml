# This is a basic workflow to help you get started with Actions

name: Spring CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # login-to-amazon-ecr:
  #   runs-on: ubuntu-latest
  #   name: AWS ECR login
  #   #Login to AWS ECR and save the results in order to use it further to push docker image
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: arn:aws:iam::585753892439:role/service-role/codebuild-spring-app-jib-build-service-role
  #         aws-region: eu-west-1
  #         mask-aws-account-id: 'false'
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1 #spring-app-repo
  #   outputs:
  #     registry: ${{ steps.login-ecr.outputs.registry }}
  #     docker_username: ${{ steps.login-ecr.outputs.docker_username_123456789012_dkr_ecr_us_east_1_amazonaws_com }} # More information on these outputs can be found below in the 'Docker Credentials' section
  #     docker_password: ${{ steps.login-ecr.outputs.docker_password_123456789012_dkr_ecr_us_east_1_amazonaws_com }}
  
  login-amazon-ecr:
    runs-on: ubuntu-latest
    name: Login ECR
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

  cache_maven_deps:
    runs-on: ubuntu-latest
    name: Build maven cache
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     distribution: 'temurin'
      #     java-version: 17

      - name: maven copy dependencies
        run: |
          mvn dependency:copy-dependencies

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        id: cache-maven
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-maven  
          
  test:
    runs-on: ubuntu-latest
    needs: [cache_maven_deps]
    name: Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        id: cache-maven
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-maven
      
      - name: cache hit check
        run: | 
          echo "cache hits? - " ${{ steps.cache-maven.outputs.cache-hit }}

      - name: Runs unit tests
        run: mvn test


  checkstyle:
    runs-on: ubuntu-latest
    needs: [cache_maven_deps]
    name: Checkstyle
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        id: cache-maven
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-maven  
  
      - name: cache hit check
        run: | 
          echo "cache hits? - " ${{ steps.cache-maven.outputs.cache-hit }}

      - name: Runs checkstyle
        if: always()
        run: mvn checkstyle:check

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [cache_maven_deps, test]
    name: Build simple Spring app

  #   # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          
      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        id: cache-maven
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-maven  
      
      - name: cache hit check
        run: | 
          echo "cache hits? - " ${{ steps.cache-maven.outputs.cache-hit }}
          echo $AWS_ACCESS_KEY_ID
          echo $AWS_SECRET_ACCESS_KEY
          
      - name: Maven Jib build and push
        run: |
          mvn compile jib:build 
          -Dimage=$AWS_ACCOUNT_ID.dkr.ecr.eu-west-1.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG 
          -DawsAccessKeyId=$AWS_ACCESS_KEY_ID -DawsSecretAccessKey=$AWS_SECRET_ACCESS_KEY
  
  #     - name: Build docker image
  #       run: mvn compile jib:buildTar
      
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: jib-image.tar
  #         path: target/jib-image.tar
  
  # #Deploy artifact to EC2 instance via ssh
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: jib-image.tar
  #         repository: lazur/springboot-cicd
  #         path: jib-image.tar
      
  #     - name: Listing 
  #       run: ls -la

  #     - name: Upload artifact to S3
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: |
  #         aws s3 cp jib-image.tar s3://kyrylo-popov-task1-static-website --recursive --region eu-west-1

  #     - name: Copy artifact to EC2
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ${{ secrets.EC2_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: ${{ secrets.EC2_PORT }}
  #         script: |
  #           aws s3 cp s3://kyrylo-popov-task1-static-website/jib-image.tar jib-image.tar
            
  #     - name: Run artifact on EC2
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ${{ secrets.EC2_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: ${{ secrets.EC2_PORT }}
  #         script: |
  #           docker kill $(docker ps -q)
  #           docker load -i jib-image.tar
  #           docker run -d -p 80:8080 demo-0.0.2
