# This is a basic workflow to help you get started with Actions

name: Spring CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  cache_maven_deps:
    runs-on: ubuntu-latest
    name: Build maven cache
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: maven copy dependencies
        run: |
          mvn dependency:copy-dependencies

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        id: cache-maven
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-maven  
          
  test:
    runs-on: ubuntu-latest
    needs: [cache_maven_deps]
    name: Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        id: cache-maven
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-maven
      
      - name: cache hit check
        run: | 
          echo "cache hits? - " ${{ steps.cache-maven.outputs.cache-hit }}

      - name: Runs unit tests
        run: mvn test

  checkstyle:
    runs-on: ubuntu-latest
    needs: [cache_maven_deps]
    name: Checkstyle
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        id: cache-maven
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-maven  
  
      - name: Runs checkstyle
        if: always()
        run: mvn checkstyle:check

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [cache_maven_deps, test]
    name: Build simple Spring app
    if: ${{ needs.test.result == 'success' }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          
      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        id: cache-maven
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-maven  

      - name: cache hit check
        run: | 
          echo "cache hits? - " ${{ steps.cache-maven.outputs.cache-hit }}

      - name: Install docker-credential-ecr-login
        run: |
          sudo apt update
          sudo apt install amazon-ecr-credential-helper
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1   
          # role-to-assume: arn:aws:iam::585753892439:role/ECRAccessRole
          # arn:aws:iam::585753892439:role/service-role/codebuild-spring-app-jib-build-service-role
          # arn:aws:iam::585753892439:role/jib-ecr-role 
          role-skip-session-tagging: true
          # arn:aws:iam::585753892439:group/build_and_deploy_jibecr

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Maven Jib build and push
        run: |
          mvn compile jib:build