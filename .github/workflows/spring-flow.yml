# This is a basic workflow to help you get started with Actions

name: Spring CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build and test simple Spring app

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2    

      - name: Test and Build application
        run: mvn package

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.


  publish-job:
      runs-on: ubuntu-latest
      needs: [build_and_test]
      steps:
        - uses: actions/checkout@v3
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: 17
        - run: mvn -B package --file pom.xml -DskipTests
        - run: mkdir staging && cp target/*SNAPSHOT.jar staging

        - name: Upload artifact
          uses: actions/upload-artifact@v1
          with:
            name: demo-0.0.1-SNAPSHOT.jar
            path: staging
  
  #Deploy artifact to EC2 instance via ssh
  deploy:
    runs-on: ubuntu-latest
    needs: [publish-job]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: demo-0.0.1-SNAPSHOT.jar
          repository: lazur/springboot-cicd
          path: /tmp/demo-0.0.1-SNAPSHOT.jar

      - name: Listing directory
        run: ls -la /home/runner/work/springboot-cicd

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Listing 
        run: ls -la .github

      - name: Copy re-run script to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: .github/workflows/kill-app.sh
          target: /home/ec2-user

      - name: Run script on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            cd /home/ec2-user
            chmod +x kill-app.sh
            ./kill-app.sh

      - name: Push to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # cd /tmp
            # scp /tmp/demo-0.0.1-SNAPSHOT.jar ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/
            echo "Hello, world!"
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          StrictHostKeyChecking: no
